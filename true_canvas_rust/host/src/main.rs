// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    GUEST_CODE_FOR_TRUST_CANVAS_ELF, GUEST_CODE_FOR_TRUST_CANVAS_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use true_canvas_core::{build_merkle_tree_from_pixels, generate_random_command_sequence, generate_random_matrix, serialize_merkle_tree, CANVAS_SIZE};

fn main() {


    let matrix = generate_random_matrix(CANVAS_SIZE);
    let merkle_tree = build_merkle_tree_from_pixels(matrix);
    let commands = generate_random_command_sequence(10, CANVAS_SIZE, 4);
    let serialized_merkle_tree = serialize_merkle_tree(merkle_tree);

    
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    let env = ExecutorEnv::builder()
        .write(&serialized_merkle_tree)
        .unwrap()
        .write(&commands)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, GUEST_CODE_FOR_TRUST_CANVAS_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;
    // Print the receipt
    println!("Receipt: {:?}", receipt);

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: u32 = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(GUEST_CODE_FOR_TRUST_CANVAS_ID)
        .unwrap();
}
